---
- import_playbook: variable-check.yml
  vars:
    playbook: database-pull.yml

- name: Pull {{ site }} database from {{ env }} to development
  hosts: web:&{{ env }}
  remote_user: "{{ web_user }}"

  vars_files:
    - group_vars/development/wordpress_sites.yml

  vars:
    project: "{{ wordpress_sites[site] }}"
    project_root: "{{ www_root }}/{{ site }}"
    project_web_dir: "{{ project_root }}/current"
    url_from: "{{ project.site_hosts.0.canonical }}"
    dev_wordpress_sites: "{{ lookup('file', 'group_vars/development/wordpress_sites.yml') | from_yaml }}"
    url_to: "{{ dev_wordpress_sites.wordpress_sites[site].site_hosts.0.canonical }}"
    project_local_path: "{{ dev_wordpress_sites.wordpress_sites[site].local_path }}"
    dump_file: "{{ site | regex_replace('\\.+', '_') }}_db_dump.sql.gz"
    current_date_and_time: "{{ ansible_date_time.date | regex_replace('\\-+', '_') }}_{{ ansible_date_time.hour }}_{{ ansible_date_time.minute }}_{{ ansible_date_time.second }}"
    backup_file: "{{ site | regex_replace('\\.+', '_') }}_development_{{ current_date_and_time }}.sql.gz"

  pre_tasks:
    - name: Ensure site is valid
      delegate_to: localhost
      fail:
        msg: "Site `{{ site | default('') }}` is not valid. Available sites: {{ wordpress_sites.keys() | join(', ') }}"
      when: wordpress_sites[site | default('')] is not defined

    - name: Abort if environment variable is equal to development
      fail:
        msg: "ERROR: development is not a valid environment for this mode (you can't pull from development to development)."
      when: env == "development"

    - name: Check if {{ site }} local folder exists
      delegate_to: localhost
      stat:
        path: "{{ project_local_path }}"
      register: result
      become: no

    - name: Abort if {{ site }} local folder doesn't exist
      fail:
        msg: "ERROR: {{ site }} is not a valid site (local folder {{ project_local_path }} does not exist)."
      when: result.stat.exists is defined and result.stat.exists == false or result.stat.isdir is defined and result.stat.isdir == false

  tasks:
  - name: Create local database_backup directory if it doesn't exist
    delegate_to: localhost
    file:
      path: "{{ project_local_path }}/database_backup"
      state: directory
      mode: 0755
    become: no

  - name: Create database dump on {{ env }}
    shell: wp db export --allow-root - | gzip > {{ dump_file }}
    args:
      chdir: "{{ project_web_dir }}"

  - name: Pull database dump from {{ env }} to development
    fetch:
      src: "{{ project_web_dir }}/{{ dump_file }}"
      dest: "{{ project_local_path }}/"
      flat: yes

  - name: Delete database dump from {{ env }}
    shell: rm -f {{ dump_file }}
    args:
      chdir: "{{ project_web_dir }}"

  - name: Export development database before importing dump (backup)
    delegate_to: localhost
    shell: wp db export - | gzip > database_backup/{{ backup_file }}
    args:
      chdir: "{{ project_local_path }}/web/wp"
    become: no

  - name: Import database dump on development
    delegate_to: localhost
    shell: gzip -c -d {{ dump_file }} | wp db import -
    args:
      chdir: "{{ project_local_path }}/web/wp"
    become: no

  - name: Delete database dump from development
    delegate_to: localhost
    shell: rm -f {{ dump_file }}
    args:
      chdir: "{{ project_local_path }}"
    become: no

  - name: Search for {{ url_from }} and replace with {{ url_to }} on development
    delegate_to: localhost
    command: wp search-replace '//{{ url_from }}' '//{{ url_to }}' --allow-root --all-tables --precise
    args:
      chdir: "{{ project_local_path }}/web/wp"
    become: no
    tags: ['search-replace']
